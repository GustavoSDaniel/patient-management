version: '3.8'

services:
  db:
    image: postgres:16-alpine
    container_name: patient-db
    ports:
      - "5435:5432"
    restart: unless-stopped
    environment:
      POSTGRES_USER: usuario_dev
      POSTGRES_PASSWORD: senha_dev
      POSTGRES_DB: patient_db
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - patient-network

  adminer:
    image: adminer:4.8.1
    container_name: patient-adminer
    restart: unless-stopped
    ports:
      - "8090:8080"
    networks:
      - patient-network
    profiles:
      - dev

  billing-service:
    build: ./billing-service
    container_name: billing-service
    ports:
      - "8082:8081"
      - "9092:9091"
    networks:
      - patient-network

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.9
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      # Habilita o login anônimo para facilitar o desenvolvimento
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - patient-network

  kafka:
    image: docker.io/bitnami/kafka:3.6
    container_name: kafka
    restart: unless-stopped
    ports:
      - "9099:9099" # Porta para sua aplicação no localhost
      - "9099:9099" # Porta para comunicação interna (e ferramentas)
    depends_on:
      - zookeeper
    environment:
      # Conexão com o Zookeeper
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181

      # --- CONFIGURAÇÃO DOS LISTENERS ---
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT

      #  Define os LISTENERS usando os NOMES definidos acima
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,EXTERNAL://:9099

      # Define os endereços ANUNCIADOS usando os NOMES
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:9099

      # Define o listener para comunicação interna entre os brokers
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL

    networks:
      - patient-network

  patient-service:
    build: ./patient-service
    container_name: patient-service
    ports:
      - "8085:8080"
      - "9095:9090"
    depends_on:
      - db
      - billing-service
      - kafka  # Adicionado o Kafka aqui
    environment:
      # O Spring lerá o 'application-docker.yml'
      SPRING_PROFILES_ACTIVE: docker
    networks:
      - patient-network

volumes:
  db_data:

networks:
  patient-network:
    driver: bridge


