version: '3.8'

services:
  patient-db:
    image: postgres:16-alpine
    container_name: patient-db
    ports:
      - "5435:5432"
    restart: unless-stopped
    environment:
      POSTGRES_USER: usuario_dev
      POSTGRES_PASSWORD: senha_dev
      POSTGRES_DB: patient_db
    volumes:
      - patient_db_data:/var/lib/postgresql/data
    networks:
      - patient-network

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.9
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      # Habilita o login anônimo para facilitar o desenvolvimento
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - patient-network

  kafka:
    image: docker.io/bitnami/kafka:3.6
    container_name: kafka
    restart: unless-stopped
    ports:
      - "9099:9099" # Porta para sua aplicação no localhost
      - "9099:9099" # Porta para comunicação interna (e ferramentas)
    depends_on:
      - zookeeper
    environment:
      # Conexão com o Zookeeper
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181

      # --- CONFIGURAÇÃO DOS LISTENERS ---
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT

      #  Define os LISTENERS usando os NOMES definidos acima
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,EXTERNAL://:9099

      # Define os endereços ANUNCIADOS usando os NOMES
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:9099

      # Define o listener para comunicação interna entre os brokers
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL

    networks:
      - patient-network


  auth-db:
    image: postgres:16-alpine
    container_name: auth-service-db
    ports:
      - "5436:5432"
    restart: unless-stopped
    environment:
      POSTGRES_USER: usuario_dev
      POSTGRES_PASSWORD: senha_dev
      POSTGRES_DB: auth_service_db
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    networks:
      - patient-network


  # Simula a AWS
  localstack:
    container_name: "localstack-main"
    image: localstack/localstack:latest
    ports:
      # A porta "Edge" que direciona para todos os serviços
      - "127.0.0.1:4566:4566"
    environment:
      - DEBUG=0
    volumes:
      # Volume para persistir os dados entre as reinicializações do contêiner
      - "localstack_data:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - patient-network

    # --- APLICAÇÕES ---

  patient-service:
    build: ./patient-service
    container_name: patient-service
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - patient-network
    depends_on:
      - patient-db # Garante que o banco de dados inicie antes da sua aplicação
      - kafka      # Garante que o Kafka inicie antes
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  billing-service:
    build:
      context: ./billing-service   # Caminho para a pasta do serviço
      dockerfile: Dockerfile
    container_name: billing-service
    restart: unless-stopped
    ports:
      - "8081:8081"  # Porta HTTP (server.port)
      - "9092:9092"  # Porta gRPC (grpc.server.port)
      - "6565:6565"  # Porta RSocket (spring.rsocket.server.port)
    networks:
      - patient-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  analytics-service:
    build:
      # Caminho para a pasta que contém o Dockerfile do analytics-service
      context: ./analytics-service
      dockerfile: Dockerfile
    container_name: analytics-service
    restart: unless-stopped
    ports:
      - "8095:8095"
    networks:
      - patient-network
    depends_on:
      # Garante que o Kafka esteja de pé antes de iniciar este serviço
      - kafka
    environment:
      # Define o endereço do Kafka para a comunicação interna entre containers
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_PROFILES_ACTIVE=docker

  api-gateway:
    build:
      context: ./api-gateway # Caminho para a pasta do Dockerfile do gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    restart: unless-stopped
    ports:
      - "8098:8098" # Porta principal do Gateway
    networks:
      - patient-network
    depends_on:
      # Garante que os serviços de destino iniciem antes do gateway
      - auth-service
      - patient-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      # Sobrescreve as URIs do application.yml com os nomes dos serviços do Docker
      - AUTH_SERVICE_URL=http://auth-service:9002


  auth-service:
    build:
      # Caminho para a pasta que contém o Dockerfile do auth-service
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    restart: unless-stopped
    ports:
      # Mapeia a porta HTTP da aplicação
      - "9002:9002"
    networks:
      # Conecta o serviço à rede compartilhada
      - patient-network
    depends_on:
      # Garante que o banco de dados 'auth-db' esteja pronto antes
      - auth-db
    environment:
      # Sobrescreve a URL do banco de dados para usar o nome do serviço do Docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://auth-db:5432/auth_service_db
      # As credenciais podem ser mantidas, pois são as mesmas definidas no serviço auth-db
      - SPRING_DATASOURCE_USERNAME=usuario_dev
      - SPRING_DATASOURCE_PASSWORD=senha_dev
      - SPRING_PROFILES_ACTIVE=docker

volumes:
  auth_db_data:
  patient_db_data:
  localstack_data:

networks:
  patient-network:
    driver: bridge


